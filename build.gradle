plugins {
    id 'jacoco'
    id 'idea'
    id 'org.jetbrains.kotlin.jvm' version '1.2.60'
    id 'org.jetbrains.kotlin.plugin.spring' version '1.2.60'
    id 'org.jetbrains.kotlin.plugin.jpa' version '1.2.60'
    id 'org.springframework.boot' version '2.0.4.RELEASE'
}

apply plugin: "io.spring.dependency-management"

group = 'io.openfuture.chain'
version = '0.4.0'
sourceCompatibility = JavaVersion.VERSION_1_8

repositories {
    mavenCentral()
}

ext {
    kotlinVersion = '1.2.60'
}

dependencies {
    // Kotlin
    compile("org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlinVersion")
    compile("org.jetbrains.kotlin:kotlin-reflect:$kotlinVersion")
    compile("com.fasterxml.jackson.module:jackson-module-kotlin")
    compile('com.fasterxml.jackson.datatype:jackson-datatype-jsr310')

    // Spring
    compile('org.springframework.boot:spring-boot-starter-webflux')
    compile('org.springframework.boot:spring-boot-starter-data-jpa')
    compile('org.springframework.boot:spring-boot-starter-web')

    // DB
    compile('org.flywaydb:flyway-core')
    compile('com.enigmabridge:hibernate4-sqlite-dialect:0.1.2')
    compile('org.xerial:sqlite-jdbc:3.23.1')

    // Utils
    compile('org.apache.commons:commons-lang3:3.7')
    compile('com.github.oshi:oshi-core:3.5.0')

    // DevTools
    runtime('org.springframework.boot:spring-boot-devtools')
    compileOnly('org.springframework.boot:spring-boot-configuration-processor')

    //Cryptography
    compile("org.bouncycastle:bcprov-jdk15on:1.59")

    // Tests
    testCompile('org.springframework.boot:spring-boot-starter-test')
    testCompile('io.projectreactor:reactor-test')
    testCompile('org.postgresql:postgresql')
}

sourceSets {
    main.kotlin.srcDirs += 'src/main/kotlin'
    main.resources.srcDirs += 'src/main/resources'
}

// Jar
noArg {
    manifest {
        attributes("Implementation-Version": version)
    }
}

// Kotlin
compileKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}
compileTestKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}
noArg {
    annotations("javax.persistence.MappedSuperclass",
                "javax.persistence.Entity",
                "io.openfuture.chain.core.annotation.NoArgConstructor")
}

// Jacoco
jacocoTestReport {
    reports {
        xml.enabled = true
        html.enabled = true
    }
}
check.dependsOn jacocoTestReport