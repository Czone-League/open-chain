image: docker:latest

services:
  - docker:dind

stages:
  - test
  - build
  - package
  - deploy

variables:
  DOCKER_DRIVER: overlay2
  IMAGE_NAME: openplatform/chain
  GIT_SUBMODULE_STRATEGY: recursive

###########################
# Tests
###########################
unit-tests:
  stage: test
  image: openjdk:8-jdk
  before_script:
    - export GRADLE_USER_HOME=`pwd`/.gradle
  script:
    - ./gradlew check
  after_script:
    - cat build/reports/jacoco/test/html/index.html
  coverage: '/Total.*?([0-9]{1,3})%/'
  cache:
    paths:
      - .gradle/wrapper
      - .gradle/caches
  artifacts:
    when: always
    paths:
      - build/reports/
    expire_in: 1 day

###########################
# Building
###########################
build-jar:
  stage: build
  image: openjdk:8-jdk
  dependencies: []
  before_script:
    - export GRADLE_USER_HOME=`pwd`/.gradle
  script:
    - ./gradlew assemble
  cache:
    paths:
      - .gradle/wrapper
      - .gradle/caches
  artifacts:
    paths:
      - build/libs/*.jar
    expire_in: 1 day
  only:
    - sprint
    - master
    - tags

###########################
# Packaging
###########################
package-docker:
  stage: package
  dependencies:
    - build-jar
  script:
    - if [[ ${CI_COMMIT_REF_NAME} == master ]]; then export IMAGE_TAG=latest; else export IMAGE_TAG=${CI_COMMIT_REF_NAME}; fi;
    - docker login -u ${DOCKER_LOGIN} -p ${DOCKER_PASS}
    - docker build -t ${IMAGE_NAME}:${IMAGE_TAG} .
    - docker push ${IMAGE_NAME}:${IMAGE_TAG}
  only:
    - sprint
    - master
    - tags

package-native:
  stage: package
  dependencies:
    - build-jar
  script:
    - mv build/libs/open-chain-*.jar build/libs/open-chain.jar
    - |
      docker run --rm -v "$(pwd):/packages" openplatform/install4j:full \
            /JRE/install4j7.0.6/bin/install4jc --license=${INSTALL4J_KEY} \
            /packages/install4j/multi.install4j
  artifacts:
    paths:
      - artifacts/*
    expire_in: 1 day
  only:
    - tags

###########################
# Deploy
###########################
deploy-production:
  stage: deploy
  image: openplatform/ansible
  dependencies: []
  variables:
    server1_key1: $SERVER1_KEY1
    server1_key2: $SERVER1_KEY2
    server1_key3: $SERVER1_KEY3
    server1_key4: $SERVER1_KEY4
    server1_key5: $SERVER1_KEY5
    server1_key6: $SERVER1_KEY6
    server1_key7: $SERVER1_KEY7
    server1_key8: $SERVER1_KEY8
    server1_key9: $SERVER1_KEY9
    server1_key10: $SERVER1_KEY10
    server1_key11: $SERVER1_KEY11
    server2_key1: $SERVER2_KEY1
    server2_key2: $SERVER2_KEY2
    server2_key3: $SERVER2_KEY3
    server2_key4: $SERVER2_KEY4
    server2_key5: $SERVER2_KEY5
    server2_key6: $SERVER2_KEY6
    server2_key7: $SERVER2_KEY7
    server2_key8: $SERVER2_KEY8
    server2_key9: $SERVER2_KEY9
    server2_key10: $SERVER2_KEY10
    server2_key11: $SERVER2_KEY11
  script:
    - echo "${DEPLOY_KEY_PROD}" | tr -d '\r' > ansible/key.pem
    - chmod 600 ansible/key.pem
    - export ANSIBLE_HOST_KEY_CHECKING=False
    - apk add --no-cache gettext
    - |
      envsubst \
      '${server1_key1}','${server1_key2}','${server1_key3}',\
      '${server1_key4}','${server1_key5}','${server1_key6}',\
      '${server1_key7}','${server1_key8}','${server1_key9}',\
      '${server1_key10}','${server1_key11}' \
      < ansible/host_vars/35.194.73.134.template > ansible/host_vars/35.194.73.134
    - |
      envsubst \
      '${server2_key1}','${server2_key2}','${server2_key3}',\
      '${server2_key4}','${server2_key5}','${server2_key6}',\
      '${server2_key7}','${server2_key8}','${server2_key9}',\
      '${server2_key10}','${server2_key11}' \
      < ansible/host_vars/35.199.41.146.template > ansible/host_vars/35.199.41.146
    - ansible-playbook --private-key=ansible/key.pem -i ansible/inventory -e "image_tag=${CI_COMMIT_REF_NAME}" -e "count=1" -e "user_login=${DEPLOY_USER_PROD}" ansible/deploy.yml
  only:
    - tags