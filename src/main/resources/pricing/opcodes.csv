Opcode,Cost,Hint,,,
0,,NOP,Do nothing,,
1,,ACONST_NULL,Push the null object reference onto the operand stack.,,
2,,ICONST_M1,pushes int -1 onto the stack,32-bit val,
3,,ICONST_0,pushes int 0 onto the stack,32-bit val,
4,,ICONST_1,pushes int 1 onto the stack,32-bit val,
5,,ICONST_2,pushes int 2 onto the stack,32-bit val,
6,,ICONST_3,pushes int 3 onto the stack,32-bit val,
7,,ICONST_4,pushes int 4 onto the stack,32-bit val,
8,,ICONST_5,pushes int 5 onto the stack,32-bit val,
9,,LCONST_0,pushes long 0 onto the stack,64-bit val,
10,,LCONST_1,pushes long 1 onto the stack,64-bit val,
11,,FCONST_0,pushes float 0 onto the stack,32-bit val,
12,,FCONST_1,pushes float 1 onto the stack,32-bit val,
13,,FCONST_2,pushes float 2 onto the stack,32-bit val,
14,,DCONST_0,pushes double 0 onto the stack,64-bit val,
15,,DCONST_1,pushes double 1 onto the stack,64-bit val,
16,,BIPUSH,expands byte1 (a byte type) to an int and pushes it onto the stack,,
17,,SIPUSH,"expands byte1, byte2 (a short type) to an int and pushes it onto the stack",,
18,,LDC,pushes 32-bit constant_pool entry specified by indexbyte1 onto the stack,,
19,,LDC_W,Push  32-bit item from run-time constant pool (wide index),,
20,,LDC2_W,Push 64-bit item from run-time constant pool (wide index),,
21,,ILOAD,Load int from local variable,32-bit val,1 slot
22,,LLOAD,Load long from local variable,64-bit val,2 slots
23,,FLOAD,Load float from local variable,,
24,,DLOAD,Load double from local variable,,
25,,ALOAD,Load reference from local variable,,
46,,IALOAD,Load int from array,,
47,,LALOAD,Load long from array,,
48,,FALOAD,Load float from array,,
49,,DALOAD,Load double from array,,
50,,AALOAD,Load reference from array,,
51,,BALOAD,Load byte or boolean from array,,
52,,CALOAD,Load char from array,,
53,,SALOAD,Load short from array,,
54,,ISTORE,Store int into local variable,,
55,,LSTORE,Store long into local variable,,
56,,FSTORE,Store float into local variable,,
57,,DSTORE,Store double into local variable,,
58,,ASTORE,Store reference into local variable,,
79,,IASTORE,Store into int array,,
80,,LASTORE,Store into long array,,
81,,FASTORE,Store float long array,,
82,,DASTORE,Store double long array,,
83,,AASTORE,Store into reference array,,
84,,BASTORE,Store into byte or boolean array,,
85,,CASTORE,Store into char array,,
86,,SASTORE,Store into short array,,
87,,POP,Pop the top operand stack value,,
88,,POP2,Pop the top one or two operand stack values,,
89,,DUP,Duplicate the top operand stack value,,
90,,DUP_X1,Duplicate the top operand stack value and insert two values down,,
91,,DUP_X2,Duplicate the top operand stack value and insert two or three values down,,
92,,DUP2,Duplicate the top one or two operand stack values,,
93,,DUP2_X1,Duplicate the top one or two operand stack values and insert two or three values down,,
94,,DUP2_X2,"Duplicate the top one or two operand stack values and insert two, three, or four values down",,
95,,SWAP,Swap the top two operand stack values,,
96,2,IADD,Add int,,
97,4,LADD,Add long,,
98,2,FADD,Add float,,
99,4,DADD,Add double,,
100,2,ISUB,Subtract int,,
101,4,LSUB,Subtract long,,
102,2,FSUB,Subtract float,,
103,4,DSUB,Subtract double,,
104,2,IMUL,Multiply int,,
105,4,LMUL,Multiply long,,
106,2,FMUL,Multiply float,,
107,4,DMUL,Multiply double,,
108,2,IDIV,Divide int,,
109,4,LDIV,Divide long,,
110,2,FDIV,Divide float,,
111,4,DDIV,Divide double,,
112,,IREM,Remainder int,,
113,,LREM,Remainder long,,
114,,FREM,Remainder float,,
115,,DREM,Remainder double,,
116,,INEG,Negate int,,
117,,LNEG,Negate long,,
118,,FNEG,Negate float,,
119,,DNEG,Negate double,,
120,,ISHL,Shift left int,bite operator,
121,,LSHL,Shift left long,bite operator,
122,,ISHR,Arithmetic shift right int,bite operator,
123,,LSHR,Arithmetic shift right long,bite operator,
124,,IUSHR,Logical shift right int,bite operator,
125,,LUSHR,Logical shift right long,bite operator,
126,,IAND,Boolean AND int,bite operator,
127,,LAND,Boolean AND long,bite operator,
128,,IOR,Boolean OR int,bite operator,
129,,LOR,Boolean OR long,bite operator,
130,,IXOR,Boolean XOR int,bite operator,
131,,LXOR,Boolean XOR long,bite operator,
132,,IINC,Increment local variable by constant,,
133,,I2L,Convert int to long,,
134,,I2F,Convert int to float,,
135,,I2D,Convert int to double,,
136,,L2I,Convert long to int,,
137,,L2F,Convert long to float,,
138,,L2D,Convert long to double,,
139,,F2I,Convert float to int,,
140,,F2L,Convert float to long,,
141,,F2D,Convert float to double,,
142,,D2I,Convert double to int,,
143,,D2L,Convert double to long,,
144,,D2F,Convert double to float,,
145,,I2B,Convert int to byte,,
146,,I2C,Convert int to char,,
147,,I2S,Convert int to short,,
148,,LCMP,Compare long,,
149,,FCMPL,"Otherwise, at least one of value1' or value2' is NaN.  the fcmpl instruction pushes the int value -1 onto the operand stack.",,
150,,FCMPG,"Otherwise, at least one of value1' or value2' is NaN.  The fcmpg instruction pushes the int value 1 onto the operand stack.",,
151,,DCMPL,"Otherwise, at least one of value1' or value2' is NaN. the dcmpl instruction pushes the int value -1 onto the operand stack.",,
152,,DCMPG,"Otherwise, at least one of value1' or value2' is NaN. the dcmpg instruction pushes the int value 1 onto the operand stack.",,
153,,IFEQ,succeeds if and only if  int value = 0,,
154,,IFNE, succeeds if and only if int value ≠ 0,,
155,,IFLT,succeeds if and only if int value < 0,,
156,,IFGE,succeeds if and only if int value ≥ 0,,
157,,IFGT,succeeds if and only if int value > 0,,
158,,IFLE,succeeds if and only if int value ≤ 0,,
159,,IF_ICMPEQ,succeeds if and only if value1 = value2 ,Int,
160,,IF_ICMPNE,succeeds if and only if value1 ≠ value2,Int,
161,,IF_ICMPLT,succeeds if and only if value1 < value2,Int,
162,,IF_ICMPGE,succeeds if and only if value1 ≥ value2,Int,
163,,IF_ICMPGT,succeeds if and only if value1 > value2,Int,
164,,IF_ICMPLE,succeeds if and only if value1 ≤ value2,Int,
165,,IF_ACMPEQ,Branch if reference comparison succeeds,`==`,
166,,IF_ACMPNE,Branch if reference comparison succeeds,`!=`,
167,,GOTO,Branch always,,
168,,JSR,Jump subroutine,,
169,,RET,Return from subroutine,,
170,,TABLESWITCH,Access jump table by index and jump,,
171,,LOOKUPSWITCH,Access jump table by key match and jump,,
172,,IRETURN,Return int from method,,
173,,LRETURN,Return long from method,,
174,,FRETURN,Return float from method,,
175,,DRETURN,Return double from method,,
176,,ARETURN,Return reference from method,,
177,,RETURN,Return void from method,,
178,,GETSTATIC,Get static field from class,,
179,,PUTSTATIC,Put static field from class,,
180,,GETFIELD,Fetch field from object,,
181,,PUTFIELD,Set field in object,,
182,,INVOKEVIRTUAL,Invoke instance method; dispatch based on class,,
183,,INVOKESPECIAL,"Invoke instance method; special handling for superclass, private, and instance initialization method invocations",,
184,,INVOKESTATIC,Invoke a class (static) method,,
185,,INVOKEINTERFACE,Invoke interface method,,
186,,INVOKEDYNAMIC,Invoke dynamic method,,
187,,NEW,Create new object,,
188,,NEWARRAY,Create new array,,
189,,ANEWARRAY,Create new array of reference,,
190,,ARRAYLENGTH,Get length of array,,
191,,ATHROW,Throw exception or error,,
192,,CHECKCAST,Check whether object is of given type,,
193,,INSTANCEOF,Determine if object is of given type,,
194,,MONITORENTER,Enter monitor for object,,
195,,MONITOREXIT,Exit monitor for object,,
197,,MULTIANEWARRAY,Create new multidimensional array,,
198,,IFNULL,Branch if reference is null,,
199,,IFNONNULL,Branch if reference is not null,,